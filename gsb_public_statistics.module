<?php

/**
 * @file gsb_public_statistics.module
 */

/**
 * Implements hook_menu().
 */
function gsb_public_statistics_menu() {
  $items = array();
  $items['admin/config/gsb/statistics'] = array(
    'title' => 'GSB Public Statistics Setting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_public_statistics_settings_form'),
    'access arguments' => array('administer nodes'),
  );

  $items['admin/config/gsb/statistics/statistics-email'] = array(
    'title' => 'Email Statistics Report',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gsb_public_statistics_send_status_mail'),
    'access arguments' => array('administer nodes'),
  );

  return $items;
}

/**
 * Admin configuration form for gsb cron emails
 */
function gsb_public_statistics_settings_form($form, $form_state) {

  $form['gsb_public_statistics_to_email'] = array(
    '#title' => 'Email(To Address)',
    '#type' => 'textfield',
    '#default_value' => variable_get('gsb_public_statistics_to_email', NULL),
    '#description' => t('use comma separated values. sends out daily email to the address'),
  );
  $form['gsb_public_statistics_enable_email'] = array(
    '#title' => 'Send Email or Display On Screen',
    '#type' => 'checkbox',
    '#default_value' => variable_get('gsb_public_statistics_enable_email', NULL),
    '#description' => t('Uncheck to disable sending email and display message body on screen using admin/config/gsb/statistics/statistics-email'),
  );

  return system_settings_form($form, $form_state);
}

/**
 * Implements hook_cron().
 */
function gsb_public_statistics_cron() {
  gsb_public_statistics_send_status_mail();
}

/**
 * Implements hook_mail().
 */
function gsb_public_statistics_mail($key, &$message, $params) {
  switch ($key) {
    case 'statistics':
      //$message['Reply-To'] = $params['Reply-To'];
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      //$message['headers']['Reply-To'] = $params['Reply-To'];
      break;
    }
}

/**
 * Sends node status email
 */
function gsb_public_statistics_send_status_mail() {

  // Get results for published nodes
  $published_rows_diffs = array();
  $published_row_last_run = drupal_json_decode(variable_get('gsb_public_statistics_published_row_json', ''));
  $result = db_query('SELECT type, count(*) AS total FROM {node} WHERE status = 1 GROUP BY type');
  while ($record = $result->fetchObject()) {
    $published_rows[] = array($record->type, $record->total);
    $key = array_search($record->type, array_column($published_row_last_run, 0));
    if ($published_row_last_run[$key][0] == $record->type && $record->total <> $published_row_last_run[$key][1]) {
      $published_rows_diffs[] = array($record->type, $record->total-$published_row_last_run[$key][1]);
    }
  }

  $diff_types = _gsb_public_statistics_array_values($published_rows);
  $diff_types_last = _gsb_public_statistics_array_values($published_row_last_run);
  $diff_merged = array_merge(array_diff($diff_types, $diff_types_last), array_diff($diff_types_last, $diff_types));
  foreach ($diff_merged as $value) {
    $search_key = array_search($value, array_column($published_rows, 0));
    if ($search_key > -1) {
      $published_rows_diffs[] = array($value, $published_rows[$search_key][1]);
    }

    $search_key = array_search($value, array_column($published_row_last_run, 0));
    if ($search_key > -1) {
      $published_rows_diffs[] = array($value, 0-$published_row_last_run[$search_key][1]);
    }
  }

  // Save the json format for published values
  variable_set('gsb_public_statistics_published_row_json', drupal_json_encode($published_rows));
  array_unshift($published_rows_diffs, array('<b>Published Diffs</b>', ''));
  if (count($published_rows_diffs) > 1) {
    $published_rows = array_merge($published_rows, $published_rows_diffs);
  }

  // Wrap published data into table format
  $body[] = gsb_public_statistics_render_table($published_rows, array('<b>Published Nodes</b>',''));

  // Get results for unpublished nodes
  $unpublished_rows_diffs = array();
  $unpublished_row_last_run = drupal_json_decode(variable_get('gsb_public_statistics_unpublished_row_json', ''));
  $result = db_query('SELECT type, count(*) AS total FROM {node} WHERE status = 0 GROUP BY type');
  while ($record = $result->fetchObject()) {
    $unpublished_rows[] = array($record->type, $record->total);
    $key = array_search($record->type, array_column($unpublished_row_last_run, 0));
    if ($unpublished_row_last_run[$key][0] == $record->type && $record->total <> $unpublished_row_last_run[$key][1]) {
      $unpublished_rows_diffs[] = array($record->type, $record->total-$unpublished_row_last_run[$key][1]);
    }
  }

  $diff_types = _gsb_public_statistics_array_values($unpublished_rows);
  $diff_types_last = _gsb_public_statistics_array_values($unpublished_row_last_run);
  $diff_merged = array_merge(array_diff($diff_types, $diff_types_last), array_diff($diff_types_last, $diff_types));
  foreach ($diff_merged as $value) {
    $search_key = array_search($value, array_column($unpublished_rows, 0));
    if ($search_key > -1) {
      $unpublished_rows_diffs[] = array($value, $unpublished_rows[$search_key][1]);
    }

    $search_key = array_search($value, array_column($unpublished_row_last_run, 0));
    if ($search_key > -1) {
      $unpublished_rows_diffs[] = array($value, 0-$unpublished_row_last_run[$search_key][1]);
    }
  }

  // Save the json format for unpublished values
  variable_set('gsb_public_statistics_unpublished_row_json', drupal_json_encode($unpublished_rows));
  array_unshift($unpublished_rows_diffs, array('<b>Unpublished Diffs</b>', ''));
  if (count($unpublished_rows_diffs) > 1) {
    $unpublished_rows = array_merge($unpublished_rows, $unpublished_rows_diffs);
  }

  // Wrap unpublished data into table format
  $body[] = gsb_public_statistics_render_table($unpublished_rows, array('<b>Unpublished Nodes</b>',''));

  // Get the mailing values.
  $eol = variable_get('mail_line_endings', MAIL_LINE_ENDINGS);
  $to = variable_get('gsb_public_statistics_to_email', NULL);
  $from = variable_get('site_mail', 'webmaster@gsb.stanford.edu');

 // $body = implode("<br />$eol", $body);
  // Set the mail parameters
  $params = array(
    'body' => $body,
    'subject' => t('GSB Public - Statistics'),
  );

  // Mail the gsb public statistics.
  if (variable_get('gsb_public_statistics_enable_email', '')) {
    if ($message = drupal_mail('gsb_public_statistics', 'statistics', $to, language_default(), $params, $from)) {
      drupal_set_message(t('GSB public statistics was sent.'));
    }
    else {
      watchdog('gsb_public_statistics', 'There was an error sending mail.');
    }
  }
  else {
    $body = implode("<br />$eol", $body);
    drupal_set_message($body);
  }
}

/**
 * Helper function gsb_public_statistics_render_table() gets table output.
 */
function gsb_public_statistics_render_table($rows, $header) {
  $table = theme('table', array(
     'header' => $header,
     'rows' => $rows,
     'attributes' => array('width' => '60%')
  ));
  return $table;
}

/**
 * Helper function for array values
 */
function _gsb_public_statistics_array_values($array) {
  $array_values = array();
  foreach ($array as $value) {
    $array_values[] = $value[0];
  }
  return $array_values;
}
